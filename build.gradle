apply plugin: 'coveralls'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'cpd'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.4.0'
        classpath 'de.aaschmid.gradle.plugins:gradle-cpd-plugin:0.1'
    }
}

description = 'A TestNG like dataprovider runner for JUnit having a simplified syntax compared to all the existing JUnit features.'
group = 'com.tngtech.java'
version = '1.9.1-SNAPSHOT'

sourceCompatibility = '1.5'

ext {
    isBuildOnJenkins = System.env['BUILD_TAG']?.startsWith('jenkins-') ?: false
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'junit', name: 'junit-dep', version: '4.8.2'
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '2.0.1'

    testCompile group: 'org.codehaus.groovy', name: 'groovy', version: '2.0.8'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.2.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    testCompile group: 'junit', name: 'junit-dep', version: '4.11'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

task jenkinsTest {
    // required due to jenkins fails if test output is not up to date :(
    // Solution found on http://www.practicalgradle.org/blog/2011/06/incremental-tests-with-jenkins/
    inputs.files test.outputs.files
    enabled = isBuildOnJenkins
    doLast {
        def timestamp = System.currentTimeMillis()
        test.getReports().getJunitXml().getDestination().eachFile{ it.lastModified = timestamp }
    }
}
build.dependsOn(jenkinsTest)

jar {
    manifest {
        attributes (
            'Built-By': "Gradle ${gradle.gradleVersion}",
            'Built-Date': new Date(), // TODO destroys incremental build feature
            'Specification-Title': 'JUnit dataprovider',
            'Specification-Version': version,
            'Specification-Vendor': 'TNG Technology Consulting GmbH',
            'Implementation-Title': 'JUnit dataprovider',
            'Implementation-Version': version,
            'Implementation-Vendor': 'TNG Technology Consulting GmbH',
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test {
    ignoreFailures = isBuildOnJenkins
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
    }
}
jacoco {
    toolVersion = '0.7.1.201405082137'
}

findbugs {
    toolVersion = '2.0.3'
    ignoreFailures = true
}

tasks.cpd {
    minimumTokenCount = 25
    source = sourceSets.main.java.srcDirs + sourceSets.test.java.srcDirs
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

// -- build and publish artifacts -------------------------------------------------------------------------------------

apply plugin: 'maven'
apply plugin: 'signing'


signing {
    // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
    required {
        gradle.taskGraph.hasTask('uploadArchives')
    }
    sign configurations.archives
}

if (!hasProperty('sonatypeUsername')) {
	ext.sonatypeUsername = ''
}
if (!hasProperty('sonatypePassword')) {
	ext.sonatypePassword = ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                // username and password from gradle.properties
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }

            pom {
                project {
                    name 'junit-dataprovider'
                    packaging 'jar'
                    description 'A TestNG like dataprovider runner for JUnit'
                    url 'https://github.com/TNG/junit-dataprovider'

                    scm {
                        url 'scm:git@github.com:TNG/junit-dataprovider.git'
                        connection 'scm:git@github.com:TNG/junit-dataprovider.git'
                        developerConnection 'scm:git@github.com:TNG/junit-dataprovider.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
                whenConfigured { pom ->
                    pom.dependencies.find{ dep -> dep.groupId == 'junit' && dep.artifactId == 'junit-dep' }.with {
                        version = '[4.8.2,4.11]'
                        scope = 'provided'
                    }
                    pom.dependencies.removeAll(pom.dependencies.findAll{ dep -> dep.scope in [ 'compile', 'test' ] })
                }
            }
        }
    }
}
